modules = ["nodejs-20", "web", "postgresql-16"]
run = "npm run dev"
hidden = [".config", ".git", "generated-icon.png", "node_modules", "dist"]

[nix]
channel = "stable-25_05"

[deployment]
deploymentTarget = "autoscale"
run = ["npm", "run", "start"]
build = ["npm", "run", "build"]

[[ports]]
localPort = 5000
externalPort = 80

[env]
PORT = "5000"

[workflows]
runButton = "Project"

[[workflows.workflow]]
name = "Project"
mode = "parallel"
author = "agent"

[[workflows.workflow.tasks]]
task = "workflow.run"
args = "Start application"

[[workflows.workflow]]
name = "Start application"
author = "agent"

[workflows.workflow.metadata]
outputType = "webview"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "npm run dev"
waitForPort = 5000

[[workflows.workflow]]
name = "Start n8n System"
author = 47013062
mode = "sequential"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "node -e \"console.log('🚀 Iniciando sistema n8n...')\""

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "npm run dev"

[[workflows.workflow]]
name = "Development Server"
author = 47030280
mode = "sequential"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "NODE_ENV=development npm run dev"

[[workflows.workflow]]
name = "Universal Lottery Analysis"
author = 47042471
mode = "sequential"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "node -e \"console.log('🌐 Iniciando análise universal de todas as loterias...')\""

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "curl -X GET http://0.0.0.0:5000/api/lotteries/universal-analysis"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "node -e \"console.log('📊 Análise histórica completa finalizada!')\""

[[workflows.workflow]]
name = "Universal Lottery Analysis"
author = 47042471
mode = "sequential"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "node -e \"console.log('🌐 Iniciando análise universal de todas as loterias...')\""

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "curl -X GET http://0.0.0.0:5000/api/lotteries/universal-analysis"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "node -e \"console.log('📊 Análise histórica completa finalizada!')\""

[agent]
expertMode = true
